name: Test Coverage & Reporting

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC to track coverage over time
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test-manifest:
    name: Generate Test Manifest
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate test manifest
        run: npm run test:manifest
        
      - name: Upload test manifest
        uses: actions/upload-artifact@v4
        with:
          name: test-manifest
          path: |
            test-manifest.json
            TEST_COVERAGE.md
          retention-days: 30
          
      - name: Comment PR with coverage report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverageReport = fs.readFileSync('TEST_COVERAGE.md', 'utf8');
            const manifest = JSON.parse(fs.readFileSync('test-manifest.json', 'utf8'));
            
            const comment = `## ðŸ“Š Test Coverage Report
            
            **Total Coverage: ${manifest.coverage.percentage}%**
            - Tested: ${manifest.coverage.tested.length} files
            - Untested: ${manifest.coverage.untested.length} files
            - Priority targets: ${manifest.coverage.priority.length} files
            
            <details>
            <summary>View detailed report</summary>
            
            ${coverageReport}
            
            </details>
            
            ---
            *Generated by automated test discovery system*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: test-manifest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with coverage
        run: npm run test:coverage
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test-manifest
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Download test manifest
        uses: actions/download-artifact@v4
        with:
          name: test-manifest
          
      - name: Run E2E tests
        run: npx playwright test --browser=${{ matrix.browser }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30
          
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    needs: test-manifest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Run mobile tests
        run: npx playwright test tests/mobile.spec.ts --project="Mobile Chrome"
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          
      - name: Upload mobile test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-test-results
          path: playwright-report/
          retention-days: 30
          
  coverage-tracking:
    name: Track Coverage Trends
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Process coverage data
        run: |
          # Read the test manifest
          COVERAGE=$(node -e "const m = require('./test-manifest/test-manifest.json'); console.log(m.coverage.percentage)")
          DATE=$(date -u +"%Y-%m-%d")
          
          # Append to coverage history file
          echo "$DATE,$COVERAGE" >> .github/coverage-history.csv
          
          # Only keep last 90 days of data
          tail -n 90 .github/coverage-history.csv > .github/coverage-history.tmp
          mv .github/coverage-history.tmp .github/coverage-history.csv
          
      - name: Commit coverage history
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/coverage-history.csv
          git diff --quiet && git diff --staged --quiet || git commit -m "Update coverage history [skip ci]"
          git push