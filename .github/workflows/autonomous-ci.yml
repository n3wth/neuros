name: Autonomous CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours for autonomous improvements

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality Checks
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript check
        run: npm run typecheck
        
      - name: Check formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Analysis
    steps:
      - uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
        
      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Unit & Integration Tests
  test-suite:
    runs-on: ubuntu-latest
    name: Test Suite
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        run: |
          npx prisma migrate deploy
          npx prisma db seed
        continue-on-error: true
      
      - name: Run unit tests
        run: npm run test -- --coverage
        env:
          CI: true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    name: Performance Analysis
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/explore
            http://localhost:3000/pricing
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Build Docker Images
  build-docker:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: [quality-check, test-suite]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push application image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: |
            neuros/app:latest
            neuros/app:${{ github.sha }}
          cache-from: type=registry,ref=neuros/app:buildcache
          cache-to: type=registry,ref=neuros/app:buildcache,mode=max
      
      - name: Build AI agents images
        run: |
          docker build -f docker/agents/Dockerfile.product-manager -t neuros/ai-pm:latest docker/agents
          docker build -f docker/agents/Dockerfile.developer -t neuros/ai-dev:latest docker/agents
          docker push neuros/ai-pm:latest
          docker push neuros/ai-dev:latest

  # Autonomous Deployment
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build-docker, e2e-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://neuros.newth.ai
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Docker Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: docker
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/neuros
            git pull origin main
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml up -d --remove-orphans
            docker system prune -f
            
      - name: Health check
        run: |
          sleep 30
          curl -f https://neuros.newth.ai/api/health || exit 1
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed for Neuros'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # AI Analysis & Improvement
  ai-analysis:
    runs-on: ubuntu-latest
    name: AI Code Analysis
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install AI dependencies
        run: |
          pip install openai anthropic github3.py
      
      - name: Run AI analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python docker/agents/scripts/code_analyzer.py
          
      - name: Create improvement issues
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python docker/agents/scripts/create_improvement_issues.py